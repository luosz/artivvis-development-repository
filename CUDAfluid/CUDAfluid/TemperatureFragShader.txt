#version 330

out vec4 FragColor;

in vec3 facePos;

uniform sampler3D volume;
uniform sampler3D temperature;
uniform vec3 camPos;

uniform int maxRaySteps;
uniform float rayStepSize;
uniform float gradientStepSize;



void main()
{

	vec4 finalColor = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	vec3 position = facePos;
	vec3 texCoord;
	vec4 color;
	vec3 normal;
	float extinction = 0.005f;
	float tempCutOff = 100;

	vec3 direction = position - camPos;
	direction = normalize(direction);

	vec3 lightPosition = vec3(2.0f, 2.0f, 2.0f);

	float absorption = 0.0f;

	
	for(int i=0; i<maxRaySteps; i++)
	{
		color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
		
		texCoord = (position + 1.0f) / 2.0f; 

		float index = texture(volume, texCoord).x;
		
		if (index > 0.03f)
		{
			vec3 newDir = normalize(lightPosition - position);
			float Tray = 1.0f;
			vec3 newPos = lightPosition;
			bool newEntered = false;
			vec3 newTexCoord;
			float Lvox, Tvox;

			newPos = newPos + (newDir * rayStepSize);

			float maxLightRaySteps = (distance(position, newPos) / rayStepSize);

//			for(int i=0; i<maxLightRaySteps; i++)
//			{
//				if (abs(position.x) > 1.0f || abs(position.y) > 1.0f || abs(position.z) > 1.0f)
//					continue;
//
//				newTexCoord = (newPos + 1.0f) / 2.0f;
//
//				float newIndex = texture(volume, newTexCoord).x;
//
//				if (newIndex == 0.0f)
//					Tvox = 1.0f;
//				else
//					Tvox = exp(-(extinction/newIndex));
//				
//				Tray = Tray * Tvox;
//				newPos = newPos + (newDir * rayStepSize);
//			}

			Lvox = (1.0f - exp(-(extinction/index)));
	
			absorption += 0.05f;
	
			if (texture(temperature, texCoord).x > tempCutOff)
				finalColor += Lvox * vec4(0.4f, 0.0f, 0.0f, 1.0f);
			else
				finalColor += Lvox * vec4(0.0f, 0.0f, 0.6f, 1.0f);
		}			
		
		
		position = position + (direction * rayStepSize);

		if (abs(position.x) > 1.0f || abs(position.y) > 1.0f || abs(position.z) > 1.0f || absorption >= 1.0f)
			break;
	}
	
	FragColor = finalColor;
}




