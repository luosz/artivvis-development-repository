#version 330

out vec4 FragColor;

in vec3 facePos;

uniform sampler3D volume;
uniform sampler2D xToonTexture;
uniform vec3 camPos;

uniform int maxRaySteps;
uniform float rayStepSize;
uniform float gradientStepSize;

uniform vec2 division2;

uniform int toonTextureWidth;
uniform int toonTextureHeight;

vec3 CalculateNormal(vec3 texCoord)
{
	vec3 sample1, sample2;

	sample1.x = texture(volume, texCoord - vec3(gradientStepSize, 0.0f, 0.0f)).x;
	sample2.x = texture(volume, texCoord + vec3(gradientStepSize, 0.0f, 0.0f)).x;
	sample1.y = texture(volume, texCoord - vec3(0.0f, gradientStepSize, 0.0f)).x;
	sample2.y = texture(volume, texCoord + vec3(0.0f, gradientStepSize, 0.0f)).x;
	sample1.z = texture(volume, texCoord - vec3(0.0f, 0.0f, gradientStepSize)).x;
	sample2.z = texture(volume, texCoord + vec3(0.0f, 0.0f, gradientStepSize)).x;

	return normalize(sample2 - sample1);
}


float CalculateNdotL(vec3 N)
{
	vec3 lightDirection = vec3(-1.0f, -1.0f, 1.0f);

	vec3 L, H;

	L = normalize(lightDirection);
	H = normalize(L + normalize(-facePos));
	
	float diff = clamp(dot(N,L), 0.0f, 1.0f);

	return diff;
}




void main()
{
	vec4 finalColor = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	vec3 position = facePos;
	vec3 texCoord;
	vec3 normal;

	vec3 direction = position - camPos;
	direction = normalize(direction);

	float texWidth = toonTextureWidth;
	float texHeight = toonTextureHeight;
	
	for(int i=0; i<maxRaySteps; i++)
	{
	
		texCoord = (position + 1.0f) / 2.0f; 

		float index = texture(volume, texCoord).x;

	
		if (index > division2.x && index < division2.y)
		{	
		
			normal = CalculateNormal(texCoord);
			float lightIntensity = CalculateNdotL(normal);

			float depth = distance(camPos, position) / 7.0f;

			float importance;
			importance = pow(dot(normal, direction), 2.5f);
//			importance = depth;

			importance = 1.0f - importance;
			
			vec2 coords = vec2((lightIntensity * texWidth) / texWidth, (importance * texHeight) / texHeight);

			finalColor = vec4(texture(xToonTexture, coords).xyz, 1.0f);

			break;
		}



		position = position + (direction * rayStepSize);

		if (abs(position.x) > 1.0f || abs(position.y) > 1.0f || abs(position.z) > 1.0f)
			break;
	}

	FragColor = finalColor;
}