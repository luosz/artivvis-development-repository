#version 330

out vec4 FragColor;

in vec3 eyeSpacePos;
in vec3 facePos;

uniform sampler3D texColor;
uniform vec3 camPos;
uniform float minRange;
uniform float cutOff;
uniform float maxRange;

uniform int maxRaySteps;
uniform float rayStepSize;
uniform float gradientStepSize;


void main()
{
	vec4 dst = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	vec3 position = facePos;
	vec3 tex;
	
	vec3 lightPosition = vec3(1.0f, 1.0f, 1.0f);
	vec4 diffuseLight = vec4(0.8f, 0.8f, 0.8f, 1.0f);
	vec3 N, L;

	vec3 direction = position - camPos;
	direction = normalize(direction);
	
	for(int i=0; i<maxRaySteps; i++)
	{
		tex = (position + 1.0f) / 2.0f; 

		float index = texture(texColor, tex).x;

		if (index > minRange && index < cutOff)
		{
			dst += vec4(index * 1.0f, 0.0f, 0.0f, 1.0f);
		}
		else if (index > cutOff && index < maxRange)
		{
			vec3 sample1, sample2;

			sample1.x = texture(texColor, tex - vec3(gradientStepSize, 0.0f, 0.0f)).x;
			sample2.x = texture(texColor, tex + vec3(gradientStepSize, 0.0f, 0.0f)).x;
			sample1.y = texture(texColor, tex - vec3(0.0f, gradientStepSize, 0.0f)).x;
			sample2.y = texture(texColor, tex + vec3(0.0f, gradientStepSize, 0.0f)).x;
			sample1.z = texture(texColor, tex - vec3(0.0f, 0.0f, gradientStepSize)).x;
			sample2.z = texture(texColor, tex + vec3(0.0f, 0.0f, gradientStepSize)).x;

			N = normalize(sample2 - sample1);
			L = normalize(lightPosition - eyeSpacePos);

			float diff = clamp(dot(N,L), 0.0f, 1.0f);

			dst += diffuseLight * diff * 5.0f;

//			dst += vec4(index * 1.0f, index * 1.0f, index * 1.0f, 1.0f);
		}

		position = position + (direction * rayStepSize);

		if (abs(position.x) > 1.0f || abs(position.y) > 1.0f || abs(position.z) > 1.0f)
		{
			dst /= (i/2);
			break;
		}
	}


	FragColor = dst;
}